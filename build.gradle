import org.junit.platform.console.options.Details

buildscript {
    ext {
        commonsLang3Version = '3.6'
        junitJupiterVersion = '5.0.0'
        junitPlatformVersion = '1.0.0'
        pitestPluginVersion = '1.2.2'
        springBootVersion = '2.0.0.BUILD-SNAPSHOT'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:${pitestPluginVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.junit.platform.gradle.plugin'

pitest {
    targetClasses = ['com.example.demo.*']
    outputFormats = ['XML', 'HTML']
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
    compile('org.liquibase:liquibase-core')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')

    runtime('com.h2database:h2')
    runtime('org.postgresql:postgresql')
    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test') {
        // Exclude JUnit 4
        exclude group: 'junit'
    }
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testCompile("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
}

junitPlatform {
    details Details.TREE
}

task checkCleanArchitecture(type: Exec) {
    commandLine 'tools/check-clean-architecture.sh'
}
check.dependsOn checkCleanArchitecture

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}